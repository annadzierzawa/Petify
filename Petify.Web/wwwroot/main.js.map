{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app.routing.module.ts","./src/app/auth/auth-callback/auth-callback.component.html","./src/app/auth/auth-callback/auth-callback.component.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.config.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.service.ts","./src/app/core/core.module.ts","./src/app/core/guards/auth.guard.ts","./src/app/core/interceptors/http-auth-interceptor.ts","./src/app/core/interceptors/toast-http-interceptor.ts","./src/app/core/services/api-client.service.ts","./src/app/core/services/api-sample.service.ts","./src/app/features/account/login/login-routing.module.ts","./src/app/features/account/login/login.component.ts","./src/app/features/account/login/login.component.html","./src/app/features/account/login/login.module.ts","./src/app/features/account/logout/logout-routing.module.ts","./src/app/features/account/logout/logout.component.ts","./src/app/features/account/logout/logout.component.html","./src/app/features/account/logout/logout.module.ts","./src/app/features/account/register/password-strength.validator.ts","./src/app/features/account/register/password-validator-feedback/password-validator-feedback.component.html","./src/app/features/account/register/password-validator-feedback/password-validator-feedback.component.ts","./src/app/features/account/register/register-routing.module.ts","./src/app/features/account/register/register.component.ts","./src/app/features/account/register/register.component.html","./src/app/features/account/register/register.module.ts","./src/app/features/features-routing.module.ts","./src/app/features/features.module.ts","./src/app/features/sample/sample.component.ts","./src/app/features/sample/sample.component.html","./src/app/main/home/home.component.ts","./src/app/main/home/home.component.html","./src/app/main/main-routing.module.ts","./src/app/main/main.module.ts","./src/app/main/navbar/navbar.component.html","./src/app/main/navbar/navbar.component.ts","./src/app/main/page-not-found/page-not-found.component.ts","./src/app/main/page-not-found/page-not-found.component.html","./src/app/material.module.ts","./src/app/shared/password-switch-type.directive.ts","./src/app/shared/shared.module.ts","./src/app/shared/validation-feedback/validation-feedback.component.html","./src/app/shared/validation-feedback/validation-feedback.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\"\r\n})\r\nexport class AppComponent {\r\n}\r\n","<ngx-loading-bar height=\"3px\"\r\n                 color=\"black\"></ngx-loading-bar>\r\n<app-navbar></app-navbar>\r\n\r\n<div class=\"margin-top-100\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { AuthModule } from \"@app/auth\";\r\nimport { LoadingBarHttpClientModule } from \"@ngx-loading-bar/http-client\";\r\n\r\nimport { AppComponent } from \"./app.component\";\r\nimport { AppRoutingModule } from \"./app.routing.module\";\r\nimport { CoreModule } from \"./core/core.module\";\r\nimport { MainModule } from \"./main/main.module\";\r\nimport { MaterialModule } from \"./material.module\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AuthModule.forRoot(),\r\n        MaterialModule,\r\n        BrowserAnimationsModule,\r\n        CoreModule,\r\n        MainModule,\r\n        AppRoutingModule,\r\n        LoadingBarHttpClientModule\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { HomeComponent } from \"./main/home/home.component\";\r\nimport { PageNotFoundComponent } from \"./main/page-not-found/page-not-found.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        component: HomeComponent,\r\n        pathMatch: \"full\"\r\n    },\r\n    {\r\n        path: \"not-found\",\r\n        component: PageNotFoundComponent\r\n    },\r\n    {\r\n        path: \"**\",\r\n        redirectTo: \"not-found\",\r\n        pathMatch: \"full\"\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(routes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AppRoutingModule { }\r\n","<mat-card *ngIf=\"error\">\r\n    <section class=\"auth-callback\">\r\n        <div>\r\n            <h1>\r\n                Oops!\r\n            </h1>\r\n        </div>\r\n        <div>\r\n            <p>There was an error, please try to <a routerLink=\"/login\">login again</a>.</p>\r\n        </div>\r\n    </section>\r\n</mat-card>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n    selector: \"app-auth-callback\",\r\n    templateUrl: \"./auth-callback.component.html\",\r\n    styleUrls: [\"auth-callback.component.scss\"]\r\n})\r\nexport class AuthCallbackComponent implements OnInit {\r\n    error = false;\r\n\r\n    constructor(private _authService: AuthService, private _router: Router) { }\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        if (this._router.url.indexOf(\"error\") >= 0) {\r\n            this.error = true;\r\n            return;\r\n        }\r\n\r\n        await this._authService.completeAuthentication();\r\n    }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { AuthCallbackComponent } from \"./auth-callback/auth-callback.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"auth-callback\",\r\n        component: AuthCallbackComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { UserManagerSettings } from \"oidc-client\";\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport class AuthSettings {\r\n    static getClientSettings(): UserManagerSettings {\r\n        return {\r\n            authority: appConfig.identityUrl,\r\n            client_id: \"Petify_spa\",\r\n            redirect_uri: `${appConfig.clientUrl}/auth-callback`,\r\n            response_type: \"code\",\r\n            scope: \"openid profile email Petifyapi.read\",\r\n            automaticSilentRenew: true,\r\n            silent_redirect_uri: `${appConfig.clientUrl}/assets/silent-refresh.html`\r\n        };\r\n    }\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\n\r\nimport { AuthCallbackComponent } from \"./auth-callback/auth-callback.component\";\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AuthCallbackComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AuthRoutingModule,\r\n        MatCardModule\r\n    ]\r\n})\r\nexport class AuthModule {\r\n    public static forRoot(): ModuleWithProviders<AuthModule> {\r\n        return {\r\n            ngModule: AuthModule,\r\n            providers: [AuthService]\r\n        };\r\n    }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User, UserManager } from \"oidc-client\";\r\nimport { from, Observable, of, ReplaySubject } from \"rxjs\";\r\nimport { catchError, map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { AuthSettings } from \"./auth.config\";\r\n\r\ninterface RegisterCredentials {\r\n    email: string;\r\n    phoneNumber: string;\r\n    password: string;\r\n    redirectUrl: string;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authStatus$: Observable<boolean>;\r\n\r\n    private _identityUrl = appConfig.identityUrl;\r\n    private _userManager = new UserManager(AuthSettings.getClientSettings());\r\n    private _user: Nullable<User>;\r\n    private _authStatusSource = new ReplaySubject<boolean>();\r\n\r\n    constructor(private _http: HttpClient, private _router: Router) {\r\n        this.authStatus$ = this._authStatusSource.asObservable();\r\n\r\n        this._userManager.getUser().then(user => {\r\n            if (!!user && !user.expired) {\r\n                this._user = user;\r\n                this._authStatusSource.next(this.isAuthenticated());\r\n            } else {\r\n                this._userManager.signinSilent().then((userResult) => {\r\n                    this._user = userResult;\r\n                    this._authStatusSource.next(this.isAuthenticated());\r\n                }).catch(() => {\r\n                    this._authStatusSource.next(false);\r\n                });\r\n            }\r\n        });\r\n\r\n        this._userManager.events.addUserLoaded(user => {\r\n            if (this._user !== user) {\r\n                this._user = user;\r\n            }\r\n        });\r\n\r\n        this._userManager.events.addUserSignedOut(() => {\r\n            this._userManager.removeUser().then(() => {\r\n                this._user = null;\r\n                this._authStatusSource.next(false);\r\n                this._router.navigate([\"logout\"]);\r\n            });\r\n        });\r\n    }\r\n\r\n    register(credentials: RegisterCredentials): Observable<any> {\r\n        return this._http.post(`${this._identityUrl}/register`, credentials);\r\n    }\r\n\r\n    login(): Promise<any> {\r\n        return this._userManager.signinRedirect({ state: window.location.href });\r\n    }\r\n\r\n    manageAccount(): void {\r\n        window.location.href = `${this._identityUrl}/Manage/Index?ReturnUrl=${encodeURIComponent(appConfig.clientUrl)}`;\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return !!this._user && !this._user.expired;\r\n    }\r\n\r\n    get isAuthenticated$(): Observable<boolean> {\r\n        return from(this._userManager.getUser()).pipe(\r\n            switchMap(user => (!!user && !user.expired\r\n                ? of(true)\r\n                : from(this._userManager.signinSilent()).pipe(\r\n                    map(userResult => {\r\n                        this._user = userResult;\r\n                        return !!userResult;\r\n                    })\r\n                ))),\r\n            catchError(() => of(false))\r\n        );\r\n    }\r\n\r\n    async completeAuthentication(): Promise<void> {\r\n        await this._userManager.signinRedirectCallback().then((user) => {\r\n            this._user = user;\r\n            this._router.navigate([(new URL(user.state)).searchParams.get(\"redirect\") || \"/\"]);\r\n            this._authStatusSource.next(this.isAuthenticated());\r\n        });\r\n    }\r\n\r\n    signout(): void {\r\n        this._userManager.signoutRedirect();\r\n    }\r\n\r\n    getAuthorizationToken(): Promise<Nullable<string>> {\r\n        return this._userManager.getUser().then(user => {\r\n            if (!!user && !user.expired) {\r\n                return `${user.token_type} ${user.access_token}`;\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    get name(): Nullable<string> {\r\n        return this._user?.profile.name;\r\n    }\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from \"@angular/common/http\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ToastrModule } from \"ngx-toastr\";\r\n\r\nimport { HttpAuthInterceptor } from \"./interceptors/http-auth-interceptor\";\r\nimport { ToastHttpInterceptor } from \"./interceptors/toast-http-interceptor\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        HttpClientModule,\r\n        ToastrModule.forRoot()\r\n    ],\r\n    declarations: [],\r\n    providers: [\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: ToastHttpInterceptor,\r\n            multi: true\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: HttpAuthInterceptor,\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class CoreModule { }\r\n","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\r\nimport { AuthService } from \"@app/auth\";\r\nimport { Observable } from \"rxjs\";\r\nimport { take, tap } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(private _router: Router, private _authService: AuthService) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n        return this._authService.isAuthenticated$.pipe(\r\n            take(1),\r\n            tap(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    this._router.navigate([\"login\"], { queryParams: { redirect: state.url }, replaceUrl: true });\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"@app/auth\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { EMPTY, from, Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport * as URLParse from \"url-parse\";\r\n\r\n@Injectable()\r\nexport class HttpAuthInterceptor implements HttpInterceptor {\r\n    allowedUrls = [appConfig.clientUrl, appConfig.apiUrl, appConfig.identityUrl];\r\n\r\n    constructor(private _authService: AuthService, private _router: Router, private _toastrService: ToastrService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (!this.checkUrl(req.url.toLowerCase())) {\r\n            return next.handle(req);\r\n        }\r\n\r\n        return from(this._authService.getAuthorizationToken().then(token => {\r\n            const newReq = token ? req.clone({ setHeaders: { authorization: token } }) : req;\r\n            return next.handle(newReq).toPromise();\r\n        })).pipe(\r\n            catchError((err) => {\r\n                if (err instanceof HttpErrorResponse) {\r\n                    switch (err.status) {\r\n                        case 401:\r\n                            return this.handle401Error(err);\r\n                        case 404:\r\n                            return this.handle404Error(err);\r\n                        default:\r\n                            return this.handle500Error(err);\r\n                    }\r\n                }\r\n                return throwError(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Handlers for http status codes\r\n    private handle401Error(_: HttpErrorResponse): Observable<HttpEvent<any>> {\r\n        this._router.navigateByUrl(\"login\");\r\n        return EMPTY;\r\n    }\r\n\r\n    private handle404Error(_: HttpErrorResponse): Observable<HttpEvent<any>> {\r\n        this._router.navigateByUrl(\"not-found\");\r\n        return EMPTY;\r\n    }\r\n\r\n    private handle500Error(error: HttpErrorResponse): Observable<HttpEvent<any>> {\r\n        this._toastrService.error(error.error?.detail || \"Operation failed\", \"Error\");\r\n        return EMPTY;\r\n    }\r\n\r\n    // Helper methods\r\n    private checkUrl(callUrl: string): boolean {\r\n        return this.allowedUrls.some(url => this.isFromService(url, callUrl));\r\n    }\r\n\r\n    private isFromService(url: string, callUrl: string): boolean {\r\n        if (!callUrl.startsWith(url)) {\r\n            return false;\r\n        }\r\n\r\n        const serviceUrlBase = new URLParse(url);\r\n        const callUrlBase = new URLParse(callUrl);\r\n\r\n        return serviceUrlBase.hostname === callUrlBase.hostname\r\n            && serviceUrlBase.protocol === callUrlBase.protocol;\r\n    }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class ToastHttpInterceptor implements HttpInterceptor {\r\n    constructor(private _toastr: ToastrService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(req).pipe(\r\n            catchError((err) => {\r\n                this._toastr.error(\"Operation failed\", \"Error\");\r\n                return throwError(err);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import \"urijs/src/URITemplate\";\r\n\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport * as URI from \"urijs\";\r\n\r\ninterface DataParam { [param: string]: any }\r\ninterface DataBody { [param: string]: any }\r\n\r\ninterface QueryParameters {\r\n    segmentParams?: DataParam;\r\n    queryParams?: DataParam;\r\n}\r\n\r\ninterface CommandParameters {\r\n    segmentParams?: DataParam;\r\n    data?: DataBody;\r\n}\r\n\r\ninterface DeleteParameters {\r\n    segmentParams?: DataParam;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class ApiClientService {\r\n    constructor(private readonly _http: HttpClient) { }\r\n\r\n    get<T>(\r\n        uriTemplate: string,\r\n        queryParameters?: QueryParameters\r\n    ): Observable<T> {\r\n        const url: string = this.buildUrl(uriTemplate, queryParameters?.segmentParams, queryParameters?.queryParams);\r\n        return this._http.get<T>(url);\r\n    }\r\n\r\n    getBlob(\r\n        uriTemplate: string,\r\n        queryParameters?: QueryParameters\r\n    ): Observable<Blob> {\r\n        const url: string = this.buildUrl(uriTemplate, queryParameters?.segmentParams, queryParameters?.queryParams);\r\n        return this._http.get(url, { responseType: \"blob\" });\r\n    }\r\n\r\n    post<T>(\r\n        uriTemplate: string,\r\n        commandParameters?: CommandParameters\r\n    ): Observable<T> {\r\n        const url: string = this.buildUrl(uriTemplate, commandParameters?.segmentParams);\r\n        return this._http.post<T>(url, commandParameters?.data);\r\n    }\r\n\r\n    postBlob(\r\n        uriTemplate: string,\r\n        commandParameters?: CommandParameters\r\n    ): Observable<Blob> {\r\n        const url: string = this.buildUrl(uriTemplate, commandParameters?.segmentParams);\r\n        return this._http.post(url, commandParameters?.data, { responseType: \"blob\" });\r\n    }\r\n\r\n    put<T>(\r\n        uriTemplate: string,\r\n        commandParameters?: CommandParameters\r\n    ): Observable<T> {\r\n        const url: string = this.buildUrl(uriTemplate, commandParameters?.segmentParams);\r\n        return this._http.put<T>(url, commandParameters?.data);\r\n    }\r\n\r\n    patch<T>(\r\n        uriTemplate: string,\r\n        commandParameters?: CommandParameters\r\n    ): Observable<T> {\r\n        const url: string = this.buildUrl(uriTemplate, commandParameters?.segmentParams);\r\n        return this._http.patch<T>(url, commandParameters?.data);\r\n    }\r\n\r\n    delete<T>(\r\n        uriTemplate: string,\r\n        deleteParameters?: DeleteParameters\r\n    ): Observable<T> {\r\n        const url: string = this.buildUrl(uriTemplate, deleteParameters?.segmentParams);\r\n        return this._http.delete<T>(url);\r\n    }\r\n\r\n    private buildUrl(\r\n        uriTemplate: string,\r\n        segmentParams?: DataParam,\r\n        queryParams?: DataParam\r\n    ): string {\r\n        this.parseDateValues(segmentParams);\r\n        this.parseDateValues(queryParams);\r\n\r\n        if (segmentParams) {\r\n            // URI.expand is never null because URITemplate is imported\r\n            // eslint-disable-next-line\r\n            uriTemplate = URI.expand!(uriTemplate, segmentParams);\r\n        }\r\n\r\n        let uri = URI(uriTemplate);\r\n\r\n        if (queryParams) {\r\n            uri = uri.query(queryParams);\r\n        }\r\n\r\n        return uri.toString();\r\n    }\r\n\r\n    private parseDateValues(params: any): void {\r\n        if (params) {\r\n            /* eslint-disable*/\r\n            for (const prop in params) {\r\n                if (params[prop]?.constructor === Date) {\r\n                    params[prop] = params[prop].toISOString();\r\n                }\r\n            }\r\n            /* eslint-disable*/\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { SampleDto } from \"@app/features/sample/sample.component\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { ApiClientService } from \"./api-client.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class ApiSampleService {\r\n    constructor(private _apiClientService: ApiClientService) { }\r\n\r\n    // Example safe API Call with Segments and Query in URI\r\n    // this.apiClientService.get(`${appConfig.ApiUrl}/values/{id}/samples/{name}`,\r\n    //      {queryParams: { id: 1, name: \"test\" }, segmentParams: { q1: \"ABC!\", q2: \"z x\" }});\r\n    // URI result: \"https://localhost:5001/values/1/samples/test?q1=ABC%21&q2=z+x\"\r\n\r\n    getSampleData(): Observable<SampleDto[]> {\r\n        return this._apiClientService.get(`${appConfig.apiUrl}/values/samples`);\r\n    }\r\n\r\n    addSampleData(sample: SampleDto): Observable<SampleDto> {\r\n        return this._apiClientService.post(`${appConfig.apiUrl}/values/samples`, { data: sample });\r\n    }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nconst routes: Routes = [{\r\n    path: \"login\",\r\n    component: LoginComponent\r\n}];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component } from \"@angular/core\";\r\nimport { AuthService } from \"@app/auth\";\r\n\r\n@Component({\r\n    selector: \"app-login\",\r\n    templateUrl: \"./login.component.html\",\r\n    styleUrls: [\"./login.component.scss\"]\r\n})\r\nexport class LoginComponent {\r\n    constructor(private _authService: AuthService) { }\r\n\r\n    login(): void {\r\n        this._authService.login();\r\n    }\r\n}\r\n","<div class=\"small-info-page\">\r\n  <mat-card>\r\n    <mat-card-title>\r\n      <img src=\"assets/images/open-identity.png\"\r\n           class=\"openid-logo\" /></mat-card-title>\r\n    <mat-card-content>\r\n      <div class=\"login-info\">\r\n        This step redirects to the IdentityServer instance to perform the authentication step. Before you can login\r\n        here, you must <a routerLink=\"/register\">register a new account</a>.\r\n      </div>\r\n      <div>\r\n        <button mat-raised-button\r\n                color=\"primary\"\r\n                (click)=\"login()\">Login with IdentityServer</button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\nimport { SharedModule } from \"@app/shared/shared.module\";\r\n\r\nimport { LoginRoutingModule } from \"./login-routing.module\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LoginRoutingModule,\r\n        ReactiveFormsModule,\r\n        MaterialModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [LoginComponent]\r\n})\r\nexport class LoginModule { }\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { LogoutComponent } from \"./logout.component\";\r\n\r\nconst routes: Routes = [{\r\n    path: \"logout\",\r\n    component: LogoutComponent\r\n}];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LogoutRoutingModule { }\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"@app/auth\";\r\n\r\n@Component({\r\n    selector: \"app-logout\",\r\n    templateUrl: \"./logout.component.html\",\r\n    styleUrls: [\"./logout.component.scss\"]\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n    constructor(private _authService: AuthService, private _router: Router) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this._authService.isAuthenticated()) {\r\n            this._router.navigate([\"/\"]);\r\n        }\r\n    }\r\n}\r\n","<div class=\"small-info-page\">\r\n  <mat-card>\r\n    <mat-card-title>Logout</mat-card-title>\r\n    <mat-card-content>\r\n      <p>You are now logged out.</p>\r\n      <p> Click <a [routerLink]=\"['/']\">here</a> to return to the home page. </p>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\nimport { SharedModule } from \"@app/shared/shared.module\";\r\n\r\nimport { LogoutRoutingModule } from \"./logout-routing.module\";\r\nimport { LogoutComponent } from \"./logout.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LogoutRoutingModule,\r\n        ReactiveFormsModule,\r\n        MaterialModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [LogoutComponent]\r\n})\r\nexport class LogoutModule { }\r\n","import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\r\n\r\nconst upperCaseCharactersValidator = (control: AbstractControl): ValidationErrors | null => {\r\n    const upperCaseCharacters = /[A-Z]+/g;\r\n    if (control.value && upperCaseCharacters.test(control.value) === false) {\r\n        return { upperCaseCharacters: { valid: false } };\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst lowerCaseCharactersValidator = (control: AbstractControl): ValidationErrors | null => {\r\n    const lowerCaseCharacters = /[a-z]+/g;\r\n    if (control.value && lowerCaseCharacters.test(control.value) === false) {\r\n        return { lowerCaseCharacters: { valid: false } };\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst numberCharactersValidator = (control: AbstractControl): ValidationErrors | null => {\r\n    const numberCharacters = /[0-9]+/g;\r\n    if (control.value && numberCharacters.test(control.value) === false) {\r\n        return { numberCharacters: { valid: false } };\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst specialCharactersValidator = (control: AbstractControl): ValidationErrors | null => {\r\n    const specialCharacters = /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]+/;\r\n    if (control.value && specialCharacters.test(control.value) === false) {\r\n        return { specialCharacters: { valid: false } };\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport class PasswordValidator {\r\n    static strength = Validators.compose([\r\n        upperCaseCharactersValidator,\r\n        lowerCaseCharactersValidator,\r\n        numberCharactersValidator,\r\n        specialCharactersValidator,\r\n        Validators.minLength(8)\r\n    ]);\r\n\r\n    static confirmed = (controlName: string, matchingControlName: string) => (control: AbstractControl): ValidationErrors | null => {\r\n        const input = control.get(controlName);\r\n        const matchingInput = control.get(matchingControlName);\r\n\r\n        if (input === null || matchingInput === null) {\r\n            return null;\r\n        }\r\n\r\n        if (matchingInput?.errors && !matchingInput.errors.confirmedValidator) {\r\n            return null;\r\n        }\r\n\r\n        if (input.value !== matchingInput.value) {\r\n            matchingInput.setErrors({ confirmedValidator: true });\r\n            return { confirmedValidator: true };\r\n        } else {\r\n            matchingInput.setErrors(null);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n","<ng-container *ngIf=\"getValidationError() as errorMessage\">\r\n    {{errorMessage}}\r\n</ng-container>\r\n","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { AbstractControl, FormGroupDirective } from \"@angular/forms\";\r\n\r\ninterface MinLength {\r\n    requiredLength: number;\r\n}\r\n\r\n@Component({\r\n    selector: \"app-password-validator-feedback\",\r\n    templateUrl: \"./password-validator-feedback.component.html\"\r\n})\r\nexport class PasswordValidatorFeedbackComponent implements OnInit {\r\n    @Input() controlName: string;\r\n    private _control: Nullable<AbstractControl>;\r\n\r\n    constructor(private _formGroup: FormGroupDirective) { }\r\n\r\n    getValidationError(): string {\r\n        if (this._control?.hasError(\"required\")) {\r\n            return \"Field is required.\";\r\n        } else if (this._control?.hasError(\"upperCaseCharacters\")) {\r\n            return \"Password must contains an uppercase character.\";\r\n        } else if (this._control?.hasError(\"lowerCaseCharacters\")) {\r\n            return \"Password must contains a lowercase character.\";\r\n        } else if (this._control?.hasError(\"numberCharacters\")) {\r\n            return \"Password must contains a number.\";\r\n        } else if (this._control?.hasError(\"specialCharacters\")) {\r\n            return \"Password must contains a special character.\";\r\n        } else if (this._control?.hasError(\"minlength\")) {\r\n            return `Password must contains at least ${(this._control?.getError(\"minlength\") as MinLength).requiredLength} characters.`;\r\n        } else if (this._control?.hasError(\"confirmedValidator\")) {\r\n            return \"This doesn't match the password you've provided.\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._control = this._formGroup.form.get(this.controlName);\r\n    }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { RegisterComponent } from \"./register.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"register\",\r\n        component: RegisterComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class RegisterRoutingModule { }\r\n","import { Component } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"@app/auth\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\nimport { PasswordValidator } from \"./password-strength.validator\";\r\n\r\n@Component({\r\n    selector: \"app-register\",\r\n    templateUrl: \"./register.component.html\"\r\n})\r\nexport class RegisterComponent {\r\n    registerForm = this._fb.group({\r\n        email: [\"\", [Validators.required, Validators.email]],\r\n        phoneNumber: [\"\", [Validators.required, Validators.minLength(6)]],\r\n        password: [\"\", [PasswordValidator.strength]],\r\n        confirmPassword: [\"\", [Validators.required]]\r\n    }, {\r\n        validators: PasswordValidator.confirmed(\"password\", \"confirmPassword\")\r\n    });\r\n\r\n    constructor(private _fb: FormBuilder, private _authService: AuthService, private _toastr: ToastrService, private _router: Router) { }\r\n\r\n    register(): void {\r\n        if (this.registerForm.valid) {\r\n            this._authService.register({\r\n                email: this.registerForm.value.email,\r\n                phoneNumber: `+48${this.registerForm.value.phoneNumber as string}`,\r\n                password: this.registerForm.value.password,\r\n                redirectUrl: `${appConfig.clientUrl}/login`\r\n            }).subscribe(_ => {\r\n                this._toastr.success(\"A verification link has been sent to your email account\", \"Thank you for registering\");\r\n                this._router.navigate([\"login\"]);\r\n            }, error => {\r\n                this._toastr.error(error.error[0].description);\r\n            });\r\n        }\r\n    }\r\n}\r\n","<div class=\"small-info-page\">\r\n    <mat-card>\r\n        <mat-card-title>Register your account</mat-card-title>\r\n        <mat-card-content>\r\n            <form [formGroup]=\"registerForm\"\r\n                  (ngSubmit)=\"register()\">\r\n                <mat-form-field class=\"full-width-input\">\r\n                    <input matInput\r\n                           placeholder=\"Email\"\r\n                           formControlName=\"email\"\r\n                           required>\r\n                    <mat-error>\r\n                        <app-validation-feedback controlName=\"email\"></app-validation-feedback>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width-input\">\r\n                    <input matInput\r\n                           placeholder=\"Phone Number\"\r\n                           formControlName=\"phoneNumber\"\r\n                           required>\r\n                    <mat-error>\r\n                        <app-validation-feedback controlName=\"phoneNumber\"></app-validation-feedback>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width-input\">\r\n                    <input #password\r\n                           matInput\r\n                           type=\"password\"\r\n                           placeholder=\"Password\"\r\n                           formControlName=\"password\"\r\n                           required>\r\n                    <mat-icon [appPasswordSwitchType]=\"password\"\r\n                              matSuffix>{{ password.type === 'password' ? 'visibility' : 'visibility_off'}}</mat-icon>\r\n                    <mat-error>\r\n                        <app-password-validator-feedback controlName=\"password\"></app-password-validator-feedback>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width-input\">\r\n                    <input #confirmPassword\r\n                           matInput\r\n                           type=\"password\"\r\n                           placeholder=\"Confirm Password\"\r\n                           formControlName=\"confirmPassword\"\r\n                           required>\r\n                    <mat-icon [appPasswordSwitchType]=\"confirmPassword\"\r\n                              matSuffix>{{ confirmPassword.type === 'password' ? 'visibility' : 'visibility_off'}}\r\n                    </mat-icon>\r\n                    <mat-error>\r\n                        <app-password-validator-feedback controlName=\"confirmPassword\">\r\n                        </app-password-validator-feedback>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <div class=\"margin-top-25\">\r\n                    <button [disabled]=\"!registerForm.valid\"\r\n                            mat-raised-button\r\n                            color=\"primary\">Register</button>\r\n                </div>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\nimport { SharedModule } from \"@app/shared/shared.module\";\r\n\r\nimport { PasswordValidatorFeedbackComponent } from \"./password-validator-feedback/password-validator-feedback.component\";\r\nimport { RegisterRoutingModule } from \"./register-routing.module\";\r\nimport { RegisterComponent } from \"./register.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RegisterRoutingModule,\r\n        ReactiveFormsModule,\r\n        MaterialModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [\r\n        RegisterComponent,\r\n        PasswordValidatorFeedbackComponent\r\n    ]\r\n})\r\nexport class RegisterModule { }\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { AuthGuard } from \"@app/core/guards/auth.guard\";\r\n\r\nimport { SampleComponent } from \"./sample/sample.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"sample\",\r\n        component: SampleComponent,\r\n        canActivate: [AuthGuard]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class FeaturesRoutingModule { }\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\n\r\nimport { LoginModule } from \"./account/login/login.module\";\r\nimport { LogoutModule } from \"./account/logout/logout.module\";\r\nimport { RegisterModule } from \"./account/register/register.module\";\r\nimport { FeaturesRoutingModule } from \"./features-routing.module\";\r\nimport { SampleComponent } from \"./sample/sample.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FeaturesRoutingModule,\r\n        MaterialModule,\r\n        LoginModule,\r\n        RegisterModule,\r\n        LogoutModule\r\n    ],\r\n    declarations: [\r\n        SampleComponent\r\n    ],\r\n    exports: [\r\n        SampleComponent\r\n    ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ApiSampleService } from \"@app/core/services/api-sample.service\";\r\nimport { Observable } from \"rxjs\";\r\nimport { switchMapTo } from \"rxjs/operators\";\r\n\r\nexport interface SampleDto {\r\n    name: string;\r\n}\r\n\r\n@Component({\r\n    selector: \"app-sample\",\r\n    templateUrl: \"./sample.component.html\"\r\n})\r\nexport class SampleComponent implements OnInit {\r\n    title = \"Sample App\";\r\n    samples!: Observable<SampleDto[]>;\r\n\r\n    constructor(private _sampleService: ApiSampleService) { }\r\n\r\n    addSample(sampleName: string): void {\r\n        this.samples = this._sampleService.addSampleData({ name: sampleName } as SampleDto)\r\n            .pipe(\r\n                switchMapTo(this._sampleService.getSampleData())\r\n            );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.samples = this._sampleService.getSampleData();\r\n    }\r\n}\r\n","<mat-card>\r\n    <h1>\r\n        Welcome to {{ title }}!\r\n    </h1>\r\n\r\n    <mat-form-field class=\"example-full-width\">\r\n        <input matInput\r\n               #sampleInput\r\n               placeholder=\"Sample value\">\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button\r\n            style=\"margin-left: 20px;\"\r\n            (click)=\"addSample(sampleInput.value)\">\r\n        <mat-icon>add</mat-icon>Add sample\r\n    </button>\r\n\r\n    <ul>\r\n        <li *ngFor=\"let sample of samples | async\">\r\n            Name: {{ sample.name }}\r\n        </li>\r\n    </ul>\r\n</mat-card>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\nconst resultCodeDictionary: { [code: number]: string } = {\r\n    1: \"Password has been changed successfully\",\r\n    2: \"Password change has been canceled\"\r\n};\r\n\r\n@Component({\r\n    selector: \"app-home\",\r\n    templateUrl: \"./home.component.html\"\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    constructor(private _route: ActivatedRoute, private _toastrService: ToastrService) { }\r\n\r\n    ngOnInit(): void {\r\n        const resultCode = +(this._route.snapshot.queryParamMap.get(\"resultCode\") || \"\");\r\n\r\n        switch (resultCode) {\r\n            case 1:\r\n                this._toastrService.success(resultCodeDictionary[resultCode]);\r\n                break;\r\n            case 2:\r\n                this._toastrService.warning(resultCodeDictionary[resultCode]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","<mat-card>\r\n    <h1>Authorization Project:</h1>\r\n    <ul>\r\n        <li>.NET 5.0</li>\r\n        <li>IdentityServer4</li>\r\n        <li>Authorization Code Flow + PKCE</li>\r\n        <li>Database - Microsoft SQL Server</li>\r\n        <li>Email verification (after registering)</li>\r\n        <li>Phone number verification (in Manage Account)</li>\r\n    </ul>\r\n\r\n    <h1>API Project:</h1>\r\n    <ul>\r\n        <li>.NET 5.0</li>\r\n        <li>CQRS + Dispatcher</li>\r\n        <li>Custom Query Builder for Dapper</li>\r\n        <li>Prepared for Domain-driven design</li>\r\n        <li>IoC Container Autofac</li>\r\n        <li>Database - Microsoft SQL Server</li>\r\n    </ul>\r\n\r\n    <h1>Angular Project:</h1>\r\n    <ul>\r\n        <li>.NET 5.0</li>\r\n        <li>Angular 11</li>\r\n        <li>Authorization (oidc-client.js)</li>\r\n        <li>Silent refresh</li>\r\n        <li>Angular Material</li>\r\n        <li>Toasts</li>\r\n        <li>Directive for input validation errors</li>\r\n        <li>Secured API calls (Encoding URI)</li>\r\n    </ul>\r\n\r\n    <h1>Other:</h1>\r\n    <ul>\r\n        <li>Domain tests</li>\r\n        <li>Integration API tests</li>\r\n        <li>Serilog</li>\r\n        <li>HTTP security headers</li>\r\n    </ul>\r\n</mat-card>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class MainRoutingModule { }\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FeaturesModule } from \"@app/features/features.module\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\n\r\nimport { HomeComponent } from \"./home/home.component\";\r\nimport { MainRoutingModule } from \"./main-routing.module\";\r\nimport { NavbarComponent } from \"./navbar/navbar.component\";\r\nimport { PageNotFoundComponent } from \"./page-not-found/page-not-found.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MainRoutingModule,\r\n        MaterialModule,\r\n        FeaturesModule\r\n    ],\r\n    declarations: [\r\n        NavbarComponent,\r\n        HomeComponent,\r\n        PageNotFoundComponent\r\n    ],\r\n    exports: [\r\n        NavbarComponent,\r\n        HomeComponent,\r\n        PageNotFoundComponent\r\n    ]\r\n})\r\nexport class MainModule { }\r\n","<mat-toolbar class=\"mat-elevation-z6 navbar\">\r\n\r\n    <a class=\"nav-title\"\r\n       routerLink=\"/\">{{title}}</a>\r\n\r\n    <span class=\"fill-remaining-space\"></span>\r\n\r\n    <a mat-button\r\n       routerLinkActive=\"menu-item-active\"\r\n       [routerLinkActiveOptions]=\"{ exact: true }\"\r\n       routerLink=\"/\">\r\n        <mat-icon>home</mat-icon> Home\r\n    </a>\r\n\r\n    <nav *ngIf=\"(authStatus$ | async) === false\">\r\n        <a mat-button\r\n           routerLinkActive=\"menu-item-active\"\r\n           routerLink=\"/login\">\r\n            <mat-icon>security</mat-icon> Login\r\n        </a>\r\n        <a mat-button\r\n           routerLinkActive=\"menu-item-active\"\r\n           routerLink=\"/register\">\r\n            <mat-icon>call_made</mat-icon> Register\r\n        </a>\r\n    </nav>\r\n\r\n    <nav *ngIf=\"authStatus$ | async\">\r\n        <a mat-button\r\n           routerLinkActive=\"menu-item-active\"\r\n           routerLink=\"/sample\">\r\n            <mat-icon>mood</mat-icon> Sample\r\n        </a>\r\n        <a mat-button\r\n           routerLinkActive=\"menu-item-active\"\r\n           (click)=\"manageAccount()\">\r\n            <mat-icon>account_circle</mat-icon> Manage Account\r\n        </a>\r\n        <a mat-button\r\n           routerLinkActive=\"menu-item-active\"\r\n           (click)=\"signout()\">\r\n            <mat-icon>exit_to_app</mat-icon> Signout {{getUserName()}}\r\n        </a>\r\n    </nav>\r\n</mat-toolbar>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { AuthService } from \"@app/auth\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Component({\r\n    selector: \"app-navbar\",\r\n    templateUrl: \"./navbar.component.html\",\r\n    styleUrls: [\"./navbar.component.scss\"]\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n    title = \"Sample App\";\r\n    authStatus$!: Observable<boolean>;\r\n\r\n    constructor(private _authService: AuthService) { }\r\n\r\n    signout(): void {\r\n        this._authService.signout();\r\n    }\r\n\r\n    manageAccount(): void {\r\n        this._authService.manageAccount();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.authStatus$ = this._authService.authStatus$;\r\n    }\r\n\r\n    getUserName(): Nullable<string> {\r\n        return this._authService.name;\r\n    }\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-page-not-found\",\r\n    templateUrl: \"./page-not-found.component.html\",\r\n    styleUrls: [\"page-not-found.component.scss\"]\r\n})\r\nexport class PageNotFoundComponent {\r\n}\r\n","<mat-card>\r\n  <section class=\"not-found\">\r\n    <div>\r\n      <h1>\r\n        404 ERROR\r\n      </h1>\r\n    </div>\r\n    <div>\r\n      <p>For some reason the page you requested could not be found on server.</p>\r\n      <p>Go back to the <a routerLink=\"/\">homepage</a>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n</mat-card>","import { NgModule } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatGridListModule } from \"@angular/material/grid-list\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        MatButtonModule,\r\n        MatCardModule,\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatMenuModule\r\n    ],\r\n    exports: [\r\n        MatButtonModule,\r\n        MatCardModule,\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatMenuModule\r\n    ]\r\n})\r\nexport class MaterialModule { }\r\n","import { Directive, HostListener, Input } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[appPasswordSwitchType]\"\r\n})\r\nexport class PasswordSwitchTypeDirective {\r\n    @Input() appPasswordSwitchType: any;\r\n\r\n    @HostListener(\"mouseup\")\r\n    onMouseOver(): void {\r\n        this.appPasswordSwitchType.type = \"password\";\r\n    }\r\n\r\n    @HostListener(\"mouseleave\")\r\n    onMouseLeave(): void {\r\n        this.appPasswordSwitchType.type = \"password\";\r\n    }\r\n\r\n    @HostListener(\"mousedown\")\r\n    onMouseDown(): void {\r\n        this.appPasswordSwitchType.type = \"text\";\r\n    }\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MaterialModule } from \"@app/material.module\";\r\n\r\nimport { PasswordSwitchTypeDirective } from \"./password-switch-type.directive\";\r\nimport { ValidationFeedbackComponent } from \"./validation-feedback/validation-feedback.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule\r\n    ],\r\n    declarations: [\r\n        ValidationFeedbackComponent,\r\n        PasswordSwitchTypeDirective\r\n    ],\r\n    exports: [\r\n        ValidationFeedbackComponent,\r\n        PasswordSwitchTypeDirective\r\n    ]\r\n})\r\nexport class SharedModule { }\r\n","<ng-container *ngIf=\"getValidationError() as errorMessage\">\r\n  {{errorMessage}}\r\n</ng-container>\r\n<ng-content *ngIf=\"!getValidationError()\"></ng-content>","import { Component, Input, OnInit, Optional } from \"@angular/core\";\r\nimport { AbstractControl, FormGroupDirective } from \"@angular/forms\";\r\n\r\ninterface MinLength {\r\n    requiredLength: number;\r\n}\r\n\r\n@Component({\r\n    selector: \"app-validation-feedback\",\r\n    templateUrl: \"./validation-feedback.component.html\"\r\n})\r\nexport class ValidationFeedbackComponent implements OnInit {\r\n    @Input() control: Nullable<AbstractControl>;\r\n    @Input() controlName: Nullable<string>;\r\n\r\n    private _validatorErrors: { [key: string]: string };\r\n\r\n    constructor(@Optional() private _formGroup: FormGroupDirective) { }\r\n\r\n    getValidationError(): string {\r\n        if (this.control) {\r\n            this._validatorErrors = {\r\n                required: \"Field is required.\",\r\n                minlength: `Field has to have at least ${(this.control.getError(\"minlength\") as MinLength)?.requiredLength} characters.`,\r\n                email: \"E-mail format is incorrect.\"\r\n            };\r\n\r\n            return this._validatorErrors[Object.keys((this.control.errors as any))[0]];\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.control && !this.controlName) {\r\n            throw new Error(\"Validation Feedback must have [control] or [controlName] inputs\");\r\n        } else if (this.controlName && this._formGroup) {\r\n            this.control = this._formGroup.form.get(this.controlName);\r\n        }\r\n    }\r\n}\r\n","export const environment = {\r\n    production: false\r\n};\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\n\r\nimport { AppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n    enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n    .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///"}